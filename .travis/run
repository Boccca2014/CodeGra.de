#!/bin/bash
# SPDX-License-Identifier: AGPL-3.0-only

res="127"

echo "Running test with pwd: $(pwd)"

set -o xtrace

case "$TO_RUN" in
    "backend-tests")
        SQLALCHEMY_DATABASE_URI='postgresql:///travis_ci_test' ./manage.py db upgrade

        pytest --cov psef \
               --cov cg_worker_pool \
               --cov cg_threading_utils \
               --postgresql=travis_ci_test \
               --cov-report term-missing \
               "$(pwd)/cg_worker_pool/tests/" \
               "$(pwd)/cg_threading_utils/tests/" \
               "$(pwd)/psef_test/" \
               -vvvv
        res1="$?"

        make doctest
        res2="$?"

        res=$(( res1 + res2 ))

        set +o xtrace
        ;;
    "lint")
        make pylint
        res1="$?"

        make privacy_statement
        [[ -z "$NO_INSTALL" ]] && npm ci
        npm run lint
        res2="$?"

        make mypy
        res3="$?"

        out="$(make isort_check)"
        res4=$?
        if [[ "$res4" -ne 0 ]]; then
            echo "$out"
        fi

        make yapf_check
        res5=$?

        out="$(npm run check-format)"
        res6=$?
        if [[ "$res6" -ne 0 ]]; then
            echo "$out"
        fi

        travis-sphinx build --source=docs/
        res7="$?"

        res=$(( res1 + res2 + res3 + res4 + res5 + res6 + res7 ))
        set +x xtrace
        ;;
    "js_unit")
        make privacy_statement
        [[ -z "$NO_INSTALL" ]] && npm ci
        npm run unit
        res="$?"

        if [[ $res -eq 0 ]]; then
            cat >config.ini <<EOF
[Back-end]
sqlalchemy_database_uri = postgresql:///travis_ci_test
DEBUG = true

[Celery]
broker_url = redis://localhost:6379

[Features]
register = true

EOF
            mkdir -p uploads
            mkdir -p mirror_uploads
            wget https://github.com/CodeGra-de/jplag/releases/download/v2.14.2-SNAPSHOT/jplag-2.14.2-SNAPSHOT-jar-with-dependencies.jar -O jplag.jar
            export PYTHONPATH="$PYTHONPATH:${PWD}"
            ./manage.py db upgrade
            ./manage.py test_data
            celery worker --app=runcelery:celery -E &
            make start_dev_server > /dev/null &
            make start_dev_npm &
            ./node_modules/wait-on/bin/wait-on http://localhost:8080/api/v1/about -l
            curl http://localhost:8080
            sleep 4
            npm run e2e
            res="$?"
            cat server.log
        fi

        set +x xtrace
        ;;

esac

set +o xtrace

[[ "$res" = 0 ]]
exit "$?"
