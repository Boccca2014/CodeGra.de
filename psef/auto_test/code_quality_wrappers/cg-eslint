#!/usr/bin/env python3
# SPDX-License-Identifier: AGPL-3.0-only

import os
import sys
import json
import tempfile
import subprocess

STUDENT = os.environ['STUDENT']


def _npm_root() -> str:
    return subprocess.check_output(['npm', 'root', '-g'])


def _file_output(f) -> str:
    print('comments for file:', f)
    msgs = []

    filename = f['filePath']
    for message in f['messages']:
        line = message['line']

        if message.get('fatal', False):
            severity = 'fatal'
        else:
            # TODO: support warning, info
            severity = 'error'

        msgs.append({
            'origin': 'ESLint',
            'msg': message['message'],
            'code': message['ruleId'],
            'severity': severity,
            'line': { 'start': line, 'end': line },
            # TODO: use values from message
            'column': { 'start': 1, 'end': 1 },
            'path': filename[len(STUDENT):].split('/')
        })

    return msgs


def main() -> None:
    """Run ESLint.
    """

    # The check for success is something we really don't want here.
    proc = subprocess.run(  # pylint: disable=subprocess-run-check
        [
            'eslint',
            '--format', 'json',
            '--resolve-plugins-relative-to', _npm_root(),
            # Prevent students from modifying the config.
            '--no-eslintrc',
            '--no-inline-config',
            '--report-unused-disable-directives',
            *sys.argv[1:],
            './**/*',
        ],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
    )

    print('output:\n', proc.stdout, end='\n\n')

    # Exit code 1 means that linting was successful but that errors
    # were found.
    if proc.returncode not in {0, 1}:
        print('ESLint crashed, stdout:\n', proc.stderr, file=sys.stderr)
        exit(1)

    output = json.dumps({
        'op': 'put_comments',
        'comments': [
            _file_output(f)
            for f in json.loads(proc.stdout.decode('utf8'))
        ],
    })

    subprocess.run(['cg-api'], stdin=output.encode('utf8'))


if __name__ == '__main__':
    main()
