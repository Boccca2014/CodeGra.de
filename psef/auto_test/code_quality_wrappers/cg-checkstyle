#!/usr/bin/env python3
# SPDX-License-Identifier: AGPL-3.0-only

import io
import os
import sys
import glob
import json
import tempfile
import subprocess
import xml.etree.ElementTree as ET

STUDENT = os.environ['STUDENT']


def handle_file_output(file_el) -> str:
    msgs = []

    for error_el in file_el:
        if error_el.tag != 'error':  # pragma: no cover
            continue

        attrib = error_el.attrib
        line = int(attrib['line'])

        msgs.append({
            'origin': 'Checkstyle',
            'msg': attrib['message'],
            'code': attrib['source'],
            'severity': attrib.get('severity', 'warning'),
            'line': {
                'start': line,
                'end': line,
            },
            'column': {
                'start': attrib['column'],
                'end': None,
            },
            'path': file_el.attrib['name'][len(STUDENT):].split('/'),
        })

    return msgs


def main() -> None:
    """Run Checkstyle
    """

    # The check for success is something we really don't want here.
    proc = subprocess.run(  # pylint: disable=subprocess-run-check
        [
            'java',
            '-jar',
            '/opt/checkstyle/checkstyle.jar',
            '-f',
            'xml',
            *sys.argv[1:],
            *glob.glob('**/*.java', recursive=True),
        ],
        stdout=subprocess.PIPE,
        stderr=subprocess.PIPE,
    )

    if proc.returncode == 254:
        print(
            'The given submission could not be parsed as Java, stderr:\n',
            proc.stderr,
            file=sys.stderr,
        )
        exit(proc.returncode)

    try:
        output = ET.fromstring(proc.stdout.decode('utf8'))
    except ET.ParseError as e:
        print(
            'The output could not be parsed as XML:\n',
            str(e),
            file=sys.stderr,
        )
        exit(1)

    output = json.dumps({
        'op': 'put_comments',
        'comments': [
            err
            for el in output
            for err in handle_file_output(el)
            if el.tag == 'file'
        ],
    })

    subprocess.run(['cg-api'], input=output.encode('utf8'))


if __name__ == '__main__':
    main()
