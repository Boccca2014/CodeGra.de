"""Remove deleted prop and start using visibility enum

Revision ID: af3a4e88ca4c
Revises: 5d92f0ee825a
Create Date: 2020-02-24 10:46:15.008216

"""
import sqlalchemy as sa
import sqlalchemy_utils
from alembic import op
from sqlalchemy.sql import text

# revision identifiers, used by Alembic.
revision = 'af3a4e88ca4c'
down_revision = '5d92f0ee825a'
branch_labels = None
depends_on = None

enum_name = 'assignmentvisibilitystate'


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    context = op.get_context()
    bind = op.get_bind()
    if context.bind.dialect.name == 'postgresql':
        has_size_type = bind.execute(
            text(
                """
            select exists (select 1 from pg_type where typname = :enum_name)"""
            ),
            enum_name=enum_name
        ).scalar()
        if not has_size_type:
            bind.execute(text(f"CREATE TYPE {enum_name} AS ENUM ()"))

    op.sync_enum_values(
        'public', enum_name, [], ['deep_linked', 'visible', 'deleted']
    )
    op.add_column(
        'Assignment',
        sa.Column(
            'visibility_state',
            sa.Enum(
                'deep_linked',
                'visible',
                'deleted',
                name=enum_name,
            ),
        )
    )

    bind.execute(
        text(
            """UPDATE "Assignment" set visibility_state = (CASE WHEN deleted
            then 'deleted' else 'visible' END)::{}""".format(enum_name)
        )
    )
    op.alter_column('Assignment', 'visibility_state', nullable=False)

    op.drop_column('Assignment', 'deleted')
    op.add_column(
        'course_lti_provider',
        sa.Column(
            'last_names_roles_poll',
            sa.TIMESTAMP(timezone=True),
            nullable=True
        )
    )
    op.add_column(
        'course_lti_provider',
        sa.Column('names_roles_claim', sa.JSON(), nullable=True)
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###

    op.drop_column('course_lti_provider', 'names_roles_claim')
    op.drop_column('course_lti_provider', 'last_names_roles_poll')
    op.add_column(
        'Assignment',
        sa.Column(
            'deleted',
            sa.BOOLEAN(),
            server_default=sa.text('false'),
            autoincrement=False,
            nullable=False
        )
    )

    bind = op.get_bind()
    bind.execute(
        text(
            """UPDATE "Assignment" set deleted = (visibility_state = 'deleted')"""
        )
    )

    op.drop_column('Assignment', 'visibility_state')
    op.sync_enum_values(
        'public', enum_name, ['deep_linked', 'visible', 'deleted'], []
    )
    bind.execute(f'DROP TYPE {enum_name}')

    # ### end Alembic commands ###
