"""Insert new permissions into database and give everyone who
had the old `can_manage_course` permission the new permissions.

Revision ID: d41ea8185e11
Revises: ddb38c4abccc
Create Date: 2017-12-10 12:43:02.266000

SPDX-License-Identifier: AGPL-3.0-only
"""
import os
import json

import sqlalchemy as sa
from alembic import op
from sqlalchemy.sql import text

# revision identifiers, used by Alembic.
revision = 'd41ea8185e11'
down_revision = 'ddb38c4abccc'
branch_labels = None
depends_on = None

new_perms = [
    'can_edit_assignment_info',
    'can_assign_graders',
    'can_edit_cgignore',
    'can_upload_bb_zip',
    'can_edit_course_roles',
    'can_edit_course_users',
    'can_create_assignment',
    'can_update_grader_status',
    'can_update_course_notifications',
]


def get_first(l):
    return list(map(lambda el: el[0], l))


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # ### end Alembic commands ###
    conn = op.get_bind()

    old_id_res = conn.execute(text("""
        SELECT id FROM "Permission" WHERE name='can_manage_course'
    """))
    if old_id_res is None:
        return

    old_id = old_id_res.first()
    if old_id is None:
        return

    old_id = old_id[0]

    role_ids = get_first(conn.execute(
        text("""
            SELECT course_role_id FROM "course_roles-permissions"
            WHERE permission_id=:perm_id
        """),
        perm_id=old_id,
    ).fetchall())

    with open(
        f'{os.path.dirname(os.path.abspath(__file__))}/../../seed_data/permissions.json',
        'r'
    ) as perms:
        perms = json.load(perms)

        for perm_name in new_perms:
            perm = perms[perm_name]
            conn.execute(
                text("""
                    INSERT INTO "Permission" (name, default_value, course_permission)
                    VALUES (:perm_name, :default_value, :course_permission)
                """),
                perm_name=perm_name,
                default_value=perm['default_value'],
                course_permission=perm['course_permission'],
            )

            new_id = conn.execute(
                text("""
                    SELECT id FROM "Permission" WHERE name=:perm_name
                """),
                perm_name=perm_name,
            ).first()[0]

            for role_id in role_ids:
                conn.execute(
                    text("""
                        INSERT INTO "course_roles-permissions"
                        (course_role_id, permission_id)
                        VALUES (:role_id, :perm_id)
                    """),
                    role_id=role_id,
                    perm_id=new_id,
                )

    conn.execute(
        text("""DELETE FROM "Permission" WHERE id=:perm_id"""),
        perm_id=old_id,
    )


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # ### end Alembic commands ###
    conn = op.get_bind()

    new_ids = get_first(conn.execute(
        text("""SELECT id FROM "Permission" WHERE name=ANY(:names)"""),
        names=new_perms,
    ).fetchall())

    if len(new_ids) == 0:
        return

    role_ids = get_first(conn.execute(
        text("""
            SELECT DISTINCT course_role_id FROM "course_roles-permissions"
            WHERE permission_id=ANY(:ids)
        """),
        ids=new_ids,
    ).fetchall())

    conn.execute(text("""
        INSERT INTO "Permission" (name, default_value, course_permission)
        VALUES ('can_manage_course', false, true)
    """))
    old_id = conn.execute(text("""
        SELECT id FROM "Permission" WHERE name='can_manage_course'
    """)).first()[0]

    for role_id in role_ids:
        conn.execute(
            text("""
                INSERT INTO "course_roles-permissions"
                (course_role_id, permission_id)
                VALUES (:role_id, :perm_id)
            """),
            role_id=role_id,
            perm_id=old_id,
        )

    conn.execute(text("""
        DELETE FROM "Permission" WHERE id=ANY(:ids)
    """), ids=new_ids)
