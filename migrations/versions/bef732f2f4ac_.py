"""Drop `lti_user_id` and start using link table between User and LTIProvider

Revision ID: bef732f2f4ac
Revises: a811d8ad8840
Create Date: 2020-02-03 21:31:11.848098

"""
import sqlalchemy as sa
import sqlalchemy_utils
from alembic import op
from sqlalchemy.sql import text

import cg_dt_utils

# revision identifiers, used by Alembic.
revision = 'bef732f2f4ac'
down_revision = 'a811d8ad8840'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        'user_lti-provider',
        sa.Column('created_at', sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column('updated_at', sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=False),
        sa.Column('lti_provider_id', sa.String(length=36), nullable=False),
        sa.Column('lti_user_id', sa.Unicode(), nullable=False),
        sa.ForeignKeyConstraint(
            ['lti_provider_id'],
            ['LTIProvider.id'],
        ), sa.ForeignKeyConstraint(
            ['user_id'],
            ['User.id'],
        ), sa.PrimaryKeyConstraint('user_id', 'lti_provider_id'),
        sa.UniqueConstraint('lti_provider_id', 'lti_user_id')
    )

    conn = op.get_bind()
    user_ids = conn.execute(
        'select id, lti_user_id from "User" where lti_user_id is not NULL'
    ).fetchall()
    for user_id, lti_user_id in user_ids:
        now = cg_dt_utils.DatetimeWithTimezone.utcnow()
        provider_id = conn.execute(
            text(
                'SELECT c.lti_provider_id FROM "User" AS u'
                ' JOIN "users-courses" AS uc ON uc.user_id = u.id'
                ' JOIN "Course" AS c ON c.id = uc.course_id'
                ' JOIN "LTIProvider" AS lp ON c.lti_provider_id = lp.id'
                ' WHERE u.id = :user_id AND c.lti_provider_id IS NOT NULL'
            ),
            user_id=user_id,
        ).fetchone()
        if provider_id is None:
            continue
        conn.execute(
            text(
                'INSERT INTO "user_lti-provider"'
                ' (user_id, lti_provider_id, lti_user_id, created_at, updated_at)'
                ' VALUES (:user_id, :provider_id, :lti_user_id, :created_at, :updated_at)'
            ),
            user_id=user_id,
            provider_id=provider_id[0],
            lti_user_id=lti_user_id,
            created_at=now,
            updated_at=now
        )

    op.create_index(
        op.f('ix_user_lti-provider_lti_user_id'),
        'user_lti-provider', ['lti_user_id'],
        unique=False
    )
    op.drop_constraint('User_lti_user_id_key', 'User', type_='unique')
    op.drop_column('User', 'lti_user_id')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    assert False, 'This migration cannot be safely rolled back at this point'
    op.add_column(
        'User',
        sa.Column(
            'lti_user_id', sa.VARCHAR(), autoincrement=False, nullable=True
        )
    )
    op.create_unique_constraint(
        'User_lti_user_id_key', 'User', ['lti_user_id']
    )
    op.drop_index(
        op.f('ix_user_lti-provider_lti_user_id'),
        table_name='user_lti-provider'
    )
    op.drop_table('user_lti-provider')
    # ### end Alembic commands ###
