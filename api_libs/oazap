/**
 * CodeGrade
 * v1
 * DO NOT MODIFY - This file has been generated using oazapfts.
 * See https://www.npmjs.com/package/oazapfts
 */
import * as Oazapfts from "oazapfts/lib/runtime";
import * as QS from "oazapfts/lib/runtime/query";
export const defaults: Oazapfts.RequestOpts = {
    baseUrl: "https://app.codegra.de",
};
const oazapfts = Oazapfts.runtime(defaults);
export const servers = {
    server1: ({ instance = "app" }: {
        instance: string | number | boolean;
    }) => `https://${instance}.codegra.de`
};
export type Opt.FrontendOptsAsJSON = {
    AUTO_TEST_MAX_TIME_COMMAND: number;
    EXAM_LOGIN_MAX_LENGTH: number;
    LOGIN_TOKEN_BEFORE_TIME: number[];
    SITE_EMAIL: string;
    MAX_LINES: number;
    NOTIFICATION_POLL_TIME: number;
    BLACKBOARD_ZIP_UPLOAD_ENABLED: boolean;
    RUBRICS_ENABLED: boolean;
    AUTOMATIC_LTI_ROLE_ENABLED: boolean;
    LTI_ENABLED: boolean;
    LINTERS_ENABLED: boolean;
    INCREMENTAL_RUBRIC_SUBMISSION_ENABLED: boolean;
    REGISTER_ENABLED: boolean;
    GROUPS_ENABLED: boolean;
    AUTO_TEST_ENABLED: boolean;
    COURSE_REGISTER_ENABLED: boolean;
    RENDER_HTML_ENABLED: boolean;
    EMAIL_STUDENTS_ENABLED: boolean;
    PEER_FEEDBACK_ENABLED: boolean;
};
export type Opt.AllOptsAsJSON = Opt.FrontendOptsAsJSON & {
    AUTO_TEST_HEARTBEAT_INTERVAL: number;
    AUTO_TEST_HEARTBEAT_MAX_MISSED: number;
    AUTO_TEST_MAX_JOBS_PER_RUNNER: number;
    AUTO_TEST_MAX_CONCURRENT_BATCH_RUNS: number;
    MIN_PASSWORD_SCORE: number;
    RESET_TOKEN_TIME: number;
    SETTING_TOKEN_TIME: number;
    MAX_NUMBER_OF_FILES: number;
    MAX_LARGE_UPLOAD_SIZE: number;
    MAX_NORMAL_UPLOAD_SIZE: number;
    MAX_FILE_SIZE: number;
    JWT_ACCESS_TOKEN_EXPIRES: number;
};
export type APICodes = "INCORRECT_PERMISSION" | "NOT_LOGGED_IN" | "OBJECT_ID_NOT_FOUND" | "OBJECT_WRONG_TYPE" | "MISSING_REQUIRED_PARAM" | "INVALID_PARAM" | "REQUEST_TOO_LARGE" | "LOGIN_FAILURE" | "INACTIVE_USER" | "INVALID_URL" | "OBJECT_NOT_FOUND" | "BLOCKED_ASSIGNMENT" | "INVALID_CREDENTIALS" | "INVALID_STATE" | "INVALID_OAUTH_REQUEST" | "DISABLED_SETTING" | "UNKOWN_ERROR" | "INVALID_FILE_IN_ARCHIVE" | "NO_FILES_SUBMITTED" | "RATE_LIMIT_EXCEEDED" | "OBJECT_ALREADY_EXISTS" | "INVALID_ARCHIVE" | "ROUTE_NOT_FOUND" | "WEAK_PASSWORD" | "INSUFFICIENT_GROUP_SIZE" | "ASSIGNMENT_RESULT_GROUP_NOT_READY" | "ASSIGNMENT_GROUP_FULL" | "UNSUPPORTED" | "ASSIGNMENT_DEADLINE_UNSET" | "PARSING_FAILED" | "UNSAFE_ARCHIVE" | "LOCKED_UPDATE" | "NOT_NEWEST_SUBMSSION" | "UPLOAD_TYPE_DISABLED" | "WEBHOOK_DIFFERENT_BRANCH" | "WEBHOOK_UNKNOWN_EVENT_TYPE" | "WEBHOOK_UNKOWN_TYPE" | "WEBHOOK_INVALID_REQUEST" | "WEBHOOK_UNKNOWN_REQUEST" | "WEBHOOK_DISABLED" | "OBJECT_EXPIRED" | "TOO_MANY_SUBMISSIONS" | "COOL_OFF_PERIOD_ACTIVE" | "MAILING_FAILED" | "LTI1_3_ERROR" | "LTI1_3_COOKIE_ERROR" | "LTI1_1_ERROR";
export type BaseError = {
    message?: string;
    description?: string;
    code?: APICodes;
    request_id?: string;
};
export type FileRule.InputData = {
    rule_type: "allow" | "deny" | "require";
    file_type: "file" | "directory";
    name: string;
};
export type Options.InputData = {
    key: "delete_empty_directories" | "remove_leading_directories" | "allow_override";
    value: boolean;
};
export type SubmissionValidator.InputData = {
    policy: "deny_all_files" | "allow_all_files";
    rules: FileRule.InputData[];
    options: Options.InputData[];
};
export type GroupSet.AsJSON = {
    id: number;
    minimum_size: number;
    maximum_size: number;
    assignment_ids: number[];
};
export type AssignmentPeerFeedbackSettings.AsJSON = {
    amount: number;
    time: number | null;
    auto_approved: boolean;
};
export type AssignmentKind = "normal" | "exam";
export type Assignment.AsJSON = {
    id: number;
    state: string;
    description: string | null;
    created_at: string;
    deadline: string | null;
    name: string;
    is_lti: boolean;
    course_id: number;
    cgignore: (string | SubmissionValidator.InputData) | null;
    cgignore_version: string | null;
    whitespace_linter: boolean;
    available_at: string | null;
    send_login_links: boolean;
    fixed_max_rubric_points: number | null;
    max_grade: number | null;
    group_set: (GroupSet.AsJSON) | null;
    auto_test_id: number | null;
    files_upload_enabled: boolean;
    webhook_upload_enabled: boolean;
    max_submissions: number | null;
    cool_off_period: number;
    amount_in_cool_off_period: number;
    reminder_time: string | null;
    lms_name: string | null;
    peer_feedback_settings: (AssignmentPeerFeedbackSettings.AsJSON) | null;
    done_type: string | null;
    done_email: string | null;
    division_parent_id: number | null;
    analytics_workspace_ids: number[];
    kind: AssignmentKind;
};
export type FixtureLike = {
    id: string;
};
export type JsonCreateAutoTest = {
    setup_script?: string;
    run_setup_script?: string;
    has_new_fixtures?: boolean;
    grade_calculation?: string;
    results_always_visible?: boolean | null;
    prefer_teacher_revision?: boolean | null;
    fixtures?: FixtureLike[];
    assignment_id: number;
};
export type CreateAutoTestData = {
    json: JsonCreateAutoTest;
    fixture?: Blob[];
};
export type FileMixin.AsJSON = {
    id: string;
    name: string;
};
export type AutoTestFixture.AsJSON = FileMixin.AsJSON & {
    hidden: boolean;
};
export type AutoTestStepBase.AsJSONBase = {
    name: string;
    "type": string;
    weight: number;
    hidden: boolean;
    data: object;
};
export type AutoTestStepBase.AsJSON = AutoTestStepBase.AsJSONBase & {
    id: number;
};
export type RubricItem.AsJSONBase = {
    description: string;
    header: string;
    points: number;
};
export type RubricItem.AsJSON = RubricItem.AsJSONBase & {
    id: number;
};
export type RubricLockReason = "auto_test";
export type RubricRowBase.AsJSON = {
    id: number;
    header: string;
    description: string | null;
    items: RubricItem.AsJSON[];
    locked: boolean | RubricLockReason;
    "type": string;
};
export type AutoTestSuite.AsJSON = {
    id: number;
    steps: AutoTestStepBase.AsJSON[];
    rubric_row: RubricRowBase.AsJSON;
    network_disabled: boolean;
    submission_info: boolean;
    command_time_limit: number | null;
};
export type AutoTestSet.AsJSON = {
    id: number;
    suites: AutoTestSuite.AsJSON[];
    stop_points: number;
};
export type AutoTestRun.AsJSON = {
    id: number;
    created_at: string;
    state: "running";
    is_continuous: boolean;
};
export type AutoTest.AsJSON = {
    id: number;
    fixtures: AutoTestFixture.AsJSON[];
    run_setup_script: string;
    setup_script: string;
    finalize_script: string;
    grade_calculation: string | null;
    sets: AutoTestSet.AsJSON[];
    assignment_id: number;
    runs: AutoTestRun.AsJSON[];
    results_always_visible: boolean | null;
    prefer_teacher_revision: boolean | null;
};
export type LTIProviderBase.BaseAsJSON = {
    id: string;
    lms: string;
    created_at: string;
    intended_use: string;
};
export type LTI1p3Provider.BaseAsJSON = LTIProviderBase.BaseAsJSON & {
    capabilities: {
        [key: string]: string | boolean;
    };
    version: "lti1.3";
    iss: string;
};
export type LTI1p3Provider.FinalizedAsJSON = LTI1p3Provider.BaseAsJSON & {
    finalized: "true";
};
export type LTI1p3Provider.NonFinalizedAsJSON = LTI1p3Provider.BaseAsJSON & {
    finalized: "false";
    auth_login_url: string | null;
    auth_token_url: string | null;
    client_id: string | null;
    key_set_url: string | null;
    auth_audience: string | null;
    custom_fields: {
        [key: string]: string;
    };
    public_jwk: {
        [key: string]: string;
    };
    public_key: string;
    edit_secret: string | null;
};
export type LTI1p1Provider.BaseAsJSON = LTIProviderBase.BaseAsJSON & {
    version: "lti1.1";
};
export type LTI1p1Provider.FinalizedAsJSON = LTI1p1Provider.BaseAsJSON & {
    finalized: "true";
};
export type LTI1p1Provider.NonFinalizedAsJSON = LTI1p1Provider.BaseAsJSON & {
    finalized: "false";
    edit_secret: string | null;
    lms_consumer_key: string;
    lms_consumer_secret: string;
};
export type CourseState = "visible" | "archived" | "deleted";
export type Course.AsJSON = {
    id: number;
    name: string;
    created_at: string;
    is_lti: boolean;
    virtual: boolean;
    lti_provider: (LTI1p3Provider.FinalizedAsJSON | LTI1p3Provider.NonFinalizedAsJSON | LTI1p1Provider.FinalizedAsJSON | LTI1p1Provider.NonFinalizedAsJSON) | null;
    state: CourseState;
};
export type CourseSnippet.AsJSON = {
    id: number;
    key: string;
    value: string;
};
export type Course.AsExtendedJSON = Course.AsJSON & {
    assignments: Assignment.AsJSON[];
    group_sets: GroupSet.AsJSON[];
    snippets: CourseSnippet.AsJSON[];
};
export type LoginUserData = {
    username: string;
    password: string;
} | {
    username: string;
    own_password: string;
};
export type User.AsJSONWithoutGroup = {
    id: number;
    name: string;
    username: string;
    is_test_student: boolean;
};
export type Group.AsJSON = {
    id: number;
    members: User.AsJSONWithoutGroup[];
    name: string;
    group_set_id: number;
    created_at: string;
};
export type User.AsJSON = User.AsJSONWithoutGroup & {
    group: (Group.AsJSON) | null;
};
export type User.AsExtendedJSON = User.AsJSON & {
    email: string;
    hidden: boolean;
};
export type ResultDataPostUserLogin = {
    user: User.AsExtendedJSON;
    access_token: string;
};
export type AutoTestStepResultState = "not_started" | "running" | "passed" | "failed" | "timed_out" | "skipped";
export type AutoTestResult.AsJSON = {
    id: number;
    created_at: string;
    started_at: string | null;
    work_id: number;
    state: AutoTestStepResultState;
    points_achieved: number;
};
export type AutoTestStepResult.AsJSON = {
    id: number;
    auto_test_step: AutoTestStepBase.AsJSON;
    state: AutoTestStepResultState;
    achieved_points: number;
    log: object | null;
    started_at: string | null;
    attachment_id: string | null;
};
export type FileTree._AsJSONFile = {
    id: string;
    name: string;
};
export type FileTree.AsJSON = FileTree._AsJSONFile & {
    entries?: FileTree.AsJSON[];
};
export type AutoTestResult.AsExtendedJSON = AutoTestResult.AsJSON & {
    setup_stdout: string | null;
    setup_stderr: string | null;
    step_results: AutoTestStepResult.AsJSON[];
    approx_waiting_before: number | null;
    final_result: boolean;
    suite_files: {
        [key: string]: FileTree.AsJSON[];
    };
};
export type AutoTestStepBase.InputAsJSON = AutoTestStepBase.AsJSONBase & {
    id?: number;
};
export type UpdateSuiteAutoTestData = {
    id?: number;
    steps: AutoTestStepBase.InputAsJSON[];
    rubric_row_id: number;
    network_disabled: boolean;
    submission_info?: boolean;
    command_time_limit?: number;
};
export type RubricItem.InputAsJSON = RubricItem.AsJSONBase & {
    id?: number;
};
export type RubricRowBase.InputAsJSONBase = {
    header: string;
    description: string;
    items: RubricItem.InputAsJSON[];
};
export type RubricRowBase.InputAsJSON = RubricRowBase.InputAsJSONBase & {
    id?: number;
    "type"?: string;
};
export type PutRubricAssignmentData = {
    max_points?: number | null;
    rows?: RubricRowBase.InputAsJSON[];
};
export type CopyRubricAssignmentData = {
    old_assignment_id: number;
};
export type UpdateSetAutoTestData = {
    stop_points?: number;
};
export type AutoTestRun.AsExtendedJSON = AutoTestRun.AsJSON & {
    results: AutoTestResult.AsJSON[];
    setup_stdout: string;
    setup_stderr: string;
};
export type CopyAutoTestData = {
    assignment_id: number;
};
export type PutEnrollLinkCourseData = {
    id?: string;
    role_id: number;
    expiration_date: string;
    allow_register?: boolean;
};
export type AbstractRole.AsJSON = {
    id: number;
    name: string;
};
export type CourseRole.AsJSON = AbstractRole.AsJSON & {
    course: Course.AsJSON;
    hidden: boolean;
};
export type CourseRegistrationLink.AsJSON = {
    id: string;
    expiration_date: string;
    role: CourseRole.AsJSON;
    allow_register: boolean;
};
export type AssignmentStateEnum = "hidden" | "open" | "done";
export type AssignmentDoneType = "assigned_only" | "all_graders";
export type PatchAssignmentData = {
    state?: AssignmentStateEnum;
    name?: string;
    deadline?: string;
    max_grade?: number | null;
    group_set_id?: number | null;
    available_at?: string | null;
    send_login_links?: boolean;
    kind?: AssignmentKind;
    files_upload_enabled?: boolean;
    webhook_upload_enabled?: boolean;
    max_submissions?: number | null;
    cool_off_period?: number;
    amount_in_cool_off_period?: number;
    ignore?: string | SubmissionValidator.InputData;
    ignore_version?: "EmptySubmissionFilter" | "IgnoreFilterManager" | "SubmissionValidator";
    done_type?: (AssignmentDoneType | null);
    reminder_time?: string | null;
    done_email?: string | null;
};
export type JsonPatchAutoTest = {
    setup_script?: string;
    run_setup_script?: string;
    has_new_fixtures?: boolean;
    grade_calculation?: string;
    results_always_visible?: boolean | null;
    prefer_teacher_revision?: boolean | null;
    fixtures?: FixtureLike[];
};
export type PatchAutoTestData = {
    json: JsonPatchAutoTest;
    fixture?: Blob[];
};
export type ResultDataGetAutoTestGet = {
    id: number;
    fixtures: AutoTestFixture.AsJSON[];
    run_setup_script: string;
    setup_script: string;
    finalize_script: string;
    grade_calculation: string | null;
    sets: AutoTestSet.AsJSON[];
    assignment_id: number;
    runs: AutoTestRun.AsExtendedJSON[];
    results_always_visible: boolean | null;
    prefer_teacher_revision: boolean | null;
};
export type PatchCourseData = {
    name?: string;
    state?: CourseState;
};
export type Group.AsExtendedJSON = Group.AsJSON & {
    virtual_user: User.AsJSONWithoutGroup;
};
/**
 * Get All
 */
export function siteSettingsGetAll(opts?: Oazapfts.RequestOpts) {
    return oazapfts.fetchJson<{
        status: 200;
        data: Opt.AllOptsAsJSON | Opt.FrontendOptsAsJSON;
    } | {
        status: 400;
        data: BaseError;
    } | {
        status: 401;
        data: BaseError;
    } | {
        status: 403;
        data: BaseError;
    } | {
        status: 409;
        data: BaseError;
    } | {
        status: 5XX;
        data: BaseError;
    }>("/api/v1/site_settings/", {
        ...opts
    });
}
/**
 * Get All
 */
export function assignmentGetAll(opts?: Oazapfts.RequestOpts) {
    return oazapfts.fetchJson<{
        status: 200;
        data: Assignment.AsJSON[];
    } | {
        status: 400;
        data: BaseError;
    } | {
        status: 401;
        data: BaseError;
    } | {
        status: 403;
        data: BaseError;
    } | {
        status: 409;
        data: BaseError;
    } | {
        status: 5XX;
        data: BaseError;
    }>("/api/v1/assignments/", {
        ...opts
    });
}
/**
 * Create
 */
export function autotestCreate(createAutoTestData: CreateAutoTestData, opts?: Oazapfts.RequestOpts) {
    return oazapfts.fetchJson<{
        status: 200;
        data: AutoTest.AsJSON;
    } | {
        status: 400;
        data: BaseError;
    } | {
        status: 401;
        data: BaseError;
    } | {
        status: 403;
        data: BaseError;
    } | {
        status: 409;
        data: BaseError;
    } | {
        status: 5XX;
        data: BaseError;
    }>("/api/v1/auto_tests/", oazapfts.multipart({
        ...opts,
        method: "POST",
        body: createAutoTestData
    }));
}
/**
 * Get All
 */
export function courseGetAll(opts?: Oazapfts.RequestOpts) {
    return oazapfts.fetchJson<{
        status: 200;
        data: Course.AsExtendedJSON[];
    } | {
        status: 400;
        data: BaseError;
    } | {
        status: 401;
        data: BaseError;
    } | {
        status: 403;
        data: BaseError;
    } | {
        status: 409;
        data: BaseError;
    } | {
        status: 5XX;
        data: BaseError;
    }>("/api/v1/courses/", {
        ...opts
    });
}
/**
 * Login
 */
export function userLogin(loginUserData: LoginUserData, opts?: Oazapfts.RequestOpts) {
    return oazapfts.fetchJson<{
        status: 200;
        data: ResultDataPostUserLogin;
    } | {
        status: 400;
        data: BaseError;
    } | {
        status: 401;
        data: BaseError;
    } | {
        status: 403;
        data: BaseError;
    } | {
        status: 409;
        data: BaseError;
    } | {
        status: 5XX;
        data: BaseError;
    }>("/api/v1/login", oazapfts.json({
        ...opts,
        method: "POST",
        body: loginUserData
    }));
}
/**
 * Get
 */
export function userGet(opts?: Oazapfts.RequestOpts) {
    return oazapfts.fetchJson<{
        status: 200;
        data: User.AsJSON | {
            [key: string]: string;
        } | User.AsExtendedJSON;
    } | {
        status: 400;
        data: BaseError;
    } | {
        status: 401;
        data: BaseError;
    } | {
        status: 403;
        data: BaseError;
    } | {
        status: 409;
        data: BaseError;
    } | {
        status: 5XX;
        data: BaseError;
    }>("/api/v1/login", {
        ...opts
    });
}
/**
 * Restart Result
 */
export function autotestRestartResult(autoTestId: number, runId: number, resultId: number, opts?: Oazapfts.RequestOpts) {
    return oazapfts.fetchJson<{
        status: 200;
        data: AutoTestResult.AsExtendedJSON;
    } | {
        status: 400;
        data: BaseError;
    } | {
        status: 401;
        data: BaseError;
    } | {
        status: 403;
        data: BaseError;
    } | {
        status: 409;
        data: BaseError;
    } | {
        status: 5XX;
        data: BaseError;
    }>(`/api/v1/auto_tests/${autoTestId}/runs/${runId}/results/${resultId}/restart`, {
        ...opts,
        method: "POST"
    });
}
/**
 * Get Results By User
 */
export function autotestGetResultsByUser(autoTestId: number, runId: number, userId: number, opts?: Oazapfts.RequestOpts) {
    return oazapfts.fetchJson<{
        status: 200;
        data: AutoTestResult.AsJSON[];
    } | {
        status: 400;
        data: BaseError;
    } | {
        status: 401;
        data: BaseError;
    } | {
        status: 403;
        data: BaseError;
    } | {
        status: 409;
        data: BaseError;
    } | {
        status: 5XX;
        data: BaseError;
    }>(`/api/v1/auto_tests/${autoTestId}/runs/${runId}/users/${userId}/results/`, {
        ...opts
    });
}
/**
 * Get Result
 */
export function autotestGetResult(autoTestId: number, runId: number, resultId: number, opts?: Oazapfts.RequestOpts) {
    return oazapfts.fetchJson<{
        status: 200;
        data: AutoTestResult.AsExtendedJSON;
    } | {
        status: 400;
        data: BaseError;
    } | {
        status: 401;
        data: BaseError;
    } | {
        status: 403;
        data: BaseError;
    } | {
        status: 409;
        data: BaseError;
    } | {
        status: 5XX;
        data: BaseError;
    }>(`/api/v1/auto_tests/${autoTestId}/runs/${runId}/results/${resultId}`, {
        ...opts
    });
}
/**
 * Delete Suite
 */
export function autotestDeleteSuite(testId: number, setId: number, suiteId: number, opts?: Oazapfts.RequestOpts) {
    return oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 400;
        data: BaseError;
    } | {
        status: 401;
        data: BaseError;
    } | {
        status: 403;
        data: BaseError;
    } | {
        status: 409;
        data: BaseError;
    } | {
        status: 5XX;
        data: BaseError;
    }>(`/api/v1/auto_tests/${testId}/sets/${setId}/suites/${suiteId}`, {
        ...opts,
        method: "DELETE"
    });
}
/**
 * Update Suite
 */
export function autotestUpdateSuite(autoTestId: number, setId: number, updateSuiteAutoTestData: UpdateSuiteAutoTestData, opts?: Oazapfts.RequestOpts) {
    return oazapfts.fetchJson<{
        status: 200;
        data: AutoTestSuite.AsJSON;
    } | {
        status: 400;
        data: BaseError;
    } | {
        status: 401;
        data: BaseError;
    } | {
        status: 403;
        data: BaseError;
    } | {
        status: 409;
        data: BaseError;
    } | {
        status: 5XX;
        data: BaseError;
    }>(`/api/v1/auto_tests/${autoTestId}/sets/${setId}/suites/`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: updateSuiteAutoTestData
    }));
}
/**
 * Get Rubric
 */
export function assignmentGetRubric(assignmentId: number, opts?: Oazapfts.RequestOpts) {
    return oazapfts.fetchJson<{
        status: 200;
        data: RubricRowBase.AsJSON[];
    } | {
        status: 400;
        data: BaseError;
    } | {
        status: 401;
        data: BaseError;
    } | {
        status: 403;
        data: BaseError;
    } | {
        status: 409;
        data: BaseError;
    } | {
        status: 5XX;
        data: BaseError;
    }>(`/api/v1/assignments/${assignmentId}/rubrics/`, {
        ...opts
    });
}
/**
 * Delete Rubric
 */
export function assignmentDeleteRubric(assignmentId: number, opts?: Oazapfts.RequestOpts) {
    return oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 400;
        data: BaseError;
    } | {
        status: 401;
        data: BaseError;
    } | {
        status: 403;
        data: BaseError;
    } | {
        status: 409;
        data: BaseError;
    } | {
        status: 5XX;
        data: BaseError;
    }>(`/api/v1/assignments/${assignmentId}/rubrics/`, {
        ...opts,
        method: "DELETE"
    });
}
/**
 * Put Rubric
 */
export function assignmentPutRubric(assignmentId: number, putRubricAssignmentData: PutRubricAssignmentData, opts?: Oazapfts.RequestOpts) {
    return oazapfts.fetchJson<{
        status: 200;
        data: RubricRowBase.AsJSON[];
    } | {
        status: 400;
        data: BaseError;
    } | {
        status: 401;
        data: BaseError;
    } | {
        status: 403;
        data: BaseError;
    } | {
        status: 409;
        data: BaseError;
    } | {
        status: 5XX;
        data: BaseError;
    }>(`/api/v1/assignments/${assignmentId}/rubrics/`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: putRubricAssignmentData
    }));
}
/**
 * Get Course
 */
export function assignmentGetCourse(assignmentId: number, opts?: Oazapfts.RequestOpts) {
    return oazapfts.fetchJson<{
        status: 200;
        data: Course.AsExtendedJSON;
    } | {
        status: 400;
        data: BaseError;
    } | {
        status: 401;
        data: BaseError;
    } | {
        status: 403;
        data: BaseError;
    } | {
        status: 409;
        data: BaseError;
    } | {
        status: 5XX;
        data: BaseError;
    }>(`/api/v1/assignments/${assignmentId}/course`, {
        ...opts
    });
}
/**
 * Copy Rubric
 */
export function assignmentCopyRubric(assignmentId: number, copyRubricAssignmentData: CopyRubricAssignmentData, opts?: Oazapfts.RequestOpts) {
    return oazapfts.fetchJson<{
        status: 200;
        data: RubricRowBase.AsJSON[];
    } | {
        status: 400;
        data: BaseError;
    } | {
        status: 401;
        data: BaseError;
    } | {
        status: 403;
        data: BaseError;
    } | {
        status: 409;
        data: BaseError;
    } | {
        status: 5XX;
        data: BaseError;
    }>(`/api/v1/assignments/${assignmentId}/rubric`, oazapfts.json({
        ...opts,
        method: "POST",
        body: copyRubricAssignmentData
    }));
}
/**
 * Update Set
 */
export function autotestUpdateSet(autoTestId: number, autoTestSetId: number, updateSetAutoTestData: UpdateSetAutoTestData, opts?: Oazapfts.RequestOpts) {
    return oazapfts.fetchJson<{
        status: 200;
        data: AutoTestSet.AsJSON;
    } | {
        status: 400;
        data: BaseError;
    } | {
        status: 401;
        data: BaseError;
    } | {
        status: 403;
        data: BaseError;
    } | {
        status: 409;
        data: BaseError;
    } | {
        status: 5XX;
        data: BaseError;
    }>(`/api/v1/auto_tests/${autoTestId}/sets/${autoTestSetId}`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: updateSetAutoTestData
    }));
}
/**
 * Delete Set
 */
export function autotestDeleteSet(autoTestId: number, autoTestSetId: number, opts?: Oazapfts.RequestOpts) {
    return oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 400;
        data: BaseError;
    } | {
        status: 401;
        data: BaseError;
    } | {
        status: 403;
        data: BaseError;
    } | {
        status: 409;
        data: BaseError;
    } | {
        status: 5XX;
        data: BaseError;
    }>(`/api/v1/auto_tests/${autoTestId}/sets/${autoTestSetId}`, {
        ...opts,
        method: "DELETE"
    });
}
/**
 * Stop Run
 */
export function autotestStopRun(autoTestId: number, runId: number, opts?: Oazapfts.RequestOpts) {
    return oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 400;
        data: BaseError;
    } | {
        status: 401;
        data: BaseError;
    } | {
        status: 403;
        data: BaseError;
    } | {
        status: 409;
        data: BaseError;
    } | {
        status: 5XX;
        data: BaseError;
    }>(`/api/v1/auto_tests/${autoTestId}/runs/${runId}`, {
        ...opts,
        method: "DELETE"
    });
}
/**
 * Add Set
 */
export function autotestAddSet(autoTestId: number, opts?: Oazapfts.RequestOpts) {
    return oazapfts.fetchJson<{
        status: 200;
        data: AutoTestSet.AsJSON;
    } | {
        status: 400;
        data: BaseError;
    } | {
        status: 401;
        data: BaseError;
    } | {
        status: 403;
        data: BaseError;
    } | {
        status: 409;
        data: BaseError;
    } | {
        status: 5XX;
        data: BaseError;
    }>(`/api/v1/auto_tests/${autoTestId}/sets/`, {
        ...opts,
        method: "POST"
    });
}
/**
 * Start Run
 */
export function autotestStartRun(autoTestId: number, opts?: Oazapfts.RequestOpts) {
    return oazapfts.fetchJson<{
        status: 200;
        data: {
            [key: string]: "";
        } | AutoTestRun.AsExtendedJSON;
    } | {
        status: 400;
        data: BaseError;
    } | {
        status: 401;
        data: BaseError;
    } | {
        status: 403;
        data: BaseError;
    } | {
        status: 409;
        data: BaseError;
    } | {
        status: 5XX;
        data: BaseError;
    }>(`/api/v1/auto_tests/${autoTestId}/runs/`, {
        ...opts,
        method: "POST"
    });
}
/**
 * Copy
 */
export function autotestCopy(autoTestId: number, copyAutoTestData: CopyAutoTestData, opts?: Oazapfts.RequestOpts) {
    return oazapfts.fetchJson<{
        status: 200;
        data: AutoTest.AsJSON;
    } | {
        status: 400;
        data: BaseError;
    } | {
        status: 401;
        data: BaseError;
    } | {
        status: 403;
        data: BaseError;
    } | {
        status: 409;
        data: BaseError;
    } | {
        status: 5XX;
        data: BaseError;
    }>(`/api/v1/auto_tests/${autoTestId}/copy`, oazapfts.json({
        ...opts,
        method: "POST",
        body: copyAutoTestData
    }));
}
/**
 * Put Enroll Link
 */
export function coursePutEnrollLink(courseId: number, putEnrollLinkCourseData: PutEnrollLinkCourseData, opts?: Oazapfts.RequestOpts) {
    return oazapfts.fetchJson<{
        status: 200;
        data: CourseRegistrationLink.AsJSON;
    } | {
        status: 400;
        data: BaseError;
    } | {
        status: 401;
        data: BaseError;
    } | {
        status: 403;
        data: BaseError;
    } | {
        status: 409;
        data: BaseError;
    } | {
        status: 5XX;
        data: BaseError;
    }>(`/api/v1/courses/${courseId}/registration_links/`, oazapfts.json({
        ...opts,
        method: "PUT",
        body: putEnrollLinkCourseData
    }));
}
/**
 * Get Group Sets
 */
export function courseGetGroupSets(courseId: number, opts?: Oazapfts.RequestOpts) {
    return oazapfts.fetchJson<{
        status: 200;
        data: GroupSet.AsJSON[];
    } | {
        status: 400;
        data: BaseError;
    } | {
        status: 401;
        data: BaseError;
    } | {
        status: 403;
        data: BaseError;
    } | {
        status: 409;
        data: BaseError;
    } | {
        status: 5XX;
        data: BaseError;
    }>(`/api/v1/courses/${courseId}/group_sets/`, {
        ...opts
    });
}
/**
 * Get Snippets
 */
export function courseGetSnippets(courseId: number, opts?: Oazapfts.RequestOpts) {
    return oazapfts.fetchJson<{
        status: 200;
        data: CourseSnippet.AsJSON[];
    } | {
        status: 400;
        data: BaseError;
    } | {
        status: 401;
        data: BaseError;
    } | {
        status: 403;
        data: BaseError;
    } | {
        status: 409;
        data: BaseError;
    } | {
        status: 5XX;
        data: BaseError;
    }>(`/api/v1/courses/${courseId}/snippets/`, {
        ...opts
    });
}
/**
 * Delete Role
 */
export function courseDeleteRole(courseId: number, roleId: number, opts?: Oazapfts.RequestOpts) {
    return oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 400;
        data: BaseError;
    } | {
        status: 401;
        data: BaseError;
    } | {
        status: 403;
        data: BaseError;
    } | {
        status: 409;
        data: BaseError;
    } | {
        status: 5XX;
        data: BaseError;
    }>(`/api/v1/courses/${courseId}/roles/${roleId}`, {
        ...opts,
        method: "DELETE"
    });
}
/**
 * Patch
 */
export function assignmentPatch(assignmentId: number, patchAssignmentData: PatchAssignmentData, opts?: Oazapfts.RequestOpts) {
    return oazapfts.fetchJson<{
        status: 200;
        data: Assignment.AsJSON;
    } | {
        status: 400;
        data: BaseError;
    } | {
        status: 401;
        data: BaseError;
    } | {
        status: 403;
        data: BaseError;
    } | {
        status: 409;
        data: BaseError;
    } | {
        status: 5XX;
        data: BaseError;
    }>(`/api/v1/assignments/${assignmentId}`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: patchAssignmentData
    }));
}
/**
 * Delete
 */
export function autotestDelete(autoTestId: number, opts?: Oazapfts.RequestOpts) {
    return oazapfts.fetchJson<{
        status: 204;
    } | {
        status: 400;
        data: BaseError;
    } | {
        status: 401;
        data: BaseError;
    } | {
        status: 403;
        data: BaseError;
    } | {
        status: 409;
        data: BaseError;
    } | {
        status: 5XX;
        data: BaseError;
    }>(`/api/v1/auto_tests/${autoTestId}`, {
        ...opts,
        method: "DELETE"
    });
}
/**
 * Patch
 */
export function autotestPatch(autoTestId: number, patchAutoTestData: PatchAutoTestData, opts?: Oazapfts.RequestOpts) {
    return oazapfts.fetchJson<{
        status: 200;
        data: AutoTest.AsJSON;
    } | {
        status: 400;
        data: BaseError;
    } | {
        status: 401;
        data: BaseError;
    } | {
        status: 403;
        data: BaseError;
    } | {
        status: 409;
        data: BaseError;
    } | {
        status: 5XX;
        data: BaseError;
    }>(`/api/v1/auto_tests/${autoTestId}`, oazapfts.multipart({
        ...opts,
        method: "PATCH",
        body: patchAutoTestData
    }));
}
/**
 * Get
 */
export function autotestGet(autoTestId: number, opts?: Oazapfts.RequestOpts) {
    return oazapfts.fetchJson<{
        status: 200;
        data: ResultDataGetAutoTestGet;
    } | {
        status: 400;
        data: BaseError;
    } | {
        status: 401;
        data: BaseError;
    } | {
        status: 403;
        data: BaseError;
    } | {
        status: 409;
        data: BaseError;
    } | {
        status: 5XX;
        data: BaseError;
    }>(`/api/v1/auto_tests/${autoTestId}`, {
        ...opts
    });
}
/**
 * Get
 */
export function courseGet(courseId: number, opts?: Oazapfts.RequestOpts) {
    return oazapfts.fetchJson<{
        status: 200;
        data: Course.AsExtendedJSON;
    } | {
        status: 400;
        data: BaseError;
    } | {
        status: 401;
        data: BaseError;
    } | {
        status: 403;
        data: BaseError;
    } | {
        status: 409;
        data: BaseError;
    } | {
        status: 5XX;
        data: BaseError;
    }>(`/api/v1/courses/${courseId}`, {
        ...opts
    });
}
/**
 * Patch
 */
export function coursePatch(courseId: number, patchCourseData: PatchCourseData, opts?: Oazapfts.RequestOpts) {
    return oazapfts.fetchJson<{
        status: 200;
        data: Course.AsExtendedJSON;
    } | {
        status: 400;
        data: BaseError;
    } | {
        status: 401;
        data: BaseError;
    } | {
        status: 403;
        data: BaseError;
    } | {
        status: 409;
        data: BaseError;
    } | {
        status: 5XX;
        data: BaseError;
    }>(`/api/v1/courses/${courseId}`, oazapfts.json({
        ...opts,
        method: "PATCH",
        body: patchCourseData
    }));
}
/**
 * Get
 */
export function groupGet(groupId: number, opts?: Oazapfts.RequestOpts) {
    return oazapfts.fetchJson<{
        status: 200;
        data: Group.AsExtendedJSON;
    } | {
        status: 400;
        data: BaseError;
    } | {
        status: 401;
        data: BaseError;
    } | {
        status: 403;
        data: BaseError;
    } | {
        status: 409;
        data: BaseError;
    } | {
        status: 5XX;
        data: BaseError;
    }>(`/api/v1/groups/${groupId}`, {
        ...opts
    });
}
